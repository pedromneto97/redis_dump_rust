name: CI & Release

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]
  workflow_dispatch:


jobs:

  test:
    name: Analyze & Test (Linux)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt, clippy

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run linter (clippy)
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --all-features --all-targets
        env:
          RUST_BACKTRACE: full

  build:
    name: Build Release Binaries (Matrix)
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: redis_dump_rust-linux
            bin_path: target/release/redis_dump_rust
          - os: macos-latest
            artifact_name: redis_dump_rust-macos
            bin_path: target/release/redis_dump_rust
          - os: windows-latest
            artifact_name: redis_dump_rust-windows.exe
            bin_path: target/release/redis_dump_rust.exe
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Build release binary
        run: cargo build --release --bin redis_dump_rust

      - name: Rename binary with platform suffix
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            mv target/release/redis_dump_rust target/release/redis_dump_rust-linux
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            mv target/release/redis_dump_rust target/release/redis_dump_rust-macos
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv target/release/redis_dump_rust.exe target/release/redis_dump_rust-windows.exe
          fi
        shell: bash

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ (matrix.os == 'windows-latest') && 'target/release/redis_dump_rust-windows.exe' || (matrix.os == 'macos-latest') && 'target/release/redis_dump_rust-macos' || 'target/release/redis_dump_rust-linux' }}

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v5
        with:
          path: dist

      - name: Create Release and Upload All Binaries
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/redis_dump_rust-linux/redis_dump_rust-linux
            dist/redis_dump_rust-macos/redis_dump_rust-macos
            dist/redis_dump_rust-windows.exe/redis_dump_rust-windows.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
